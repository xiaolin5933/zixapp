#!/usr/bin/perl
use strict;
use warnings;
use Zeta::Run;
use ZAPP::DT;
use ZAPP::BIP::Config;
use ZAPP::Service;
use Zark;

use Carp;
use IO::File;
use Data::Dump;
use File::Path qw/mkpath/;
use File::Copy qw/cp/;
use Getopt::Long;

use constant DEBUG => $ENV{TSVC_DEBUG} || 0;

my %args;
my $rtn = GetOptions(
     \%args,
    'name|n=s',      # 服务名称
    'datafile|d=s',  # 数据文件  
    'conf|c=s',      # xxxx.conf
);
unless($rtn) {
    &usage;
}
Data::Dump->dump(\%args) if DEBUG;

#
# 1. 参数检查
# 2. 准备输入
# 3. 设置service对象
# 4. 测试
#
&check(\%args);
my $input   = &prep(\%args);
Data::Dump->dump($input) if DEBUG;
my $service = &setup($input->{svc});
$service->handle($input->{data});

exit 0;

# desc   :  检查命令行参数
#
sub check {
    my $args = shift;

    # 如果没有提供服务名称
    unless($args->{name}) {
        warn "服务名称无效"; 
        &usage;
    }
    unless($args->{datafile}) {
        warn "数据文件无效";
        &usage;
    }
    unless( -f $args->{datafile}) {
        warn "数据文件[$args->{datafile}]无法打开";
        &usage;
    }
    unless ($args->{conf}) {
        $args->{conf} = "$ENV{ZIXAPP_HOME}/conf/svc/$args->{name}.svc";
    } 
    unless( -f $args->{conf}) {
        warn "配置文件[$args->{conf}]不存在";
       &usage;
    }
}
    
#
# desc  :  获取svc配置hash
# input :  $args  -- 参数
#
sub prep {
    my $args = shift;

    # 读你的开发配置
    my $svc = do $args->{conf};
    unless($svc) {
         die "can not do $args->{conf} [$@]"; 
    }
    
    # 读你的输入
    my $data = do $args->{datafile};
    unless($args->{datafile}) {
         die "can not do $args->{datafile} [$@]"; 
    }
    return { 
        svc =>  { 
            $args->{name} => $svc,
        }, 
        data => $data,
    };
}

#
# desc  :  产生ZAPP::Service对象
#
sub setup {
    my $svc = shift;
    my $cfg  = do "$ENV{ZIXAPP_HOME}/conf/zixapp.conf";
    my $proc = do "$ENV{ZIXAPP_HOME}/conf/proc.conf";
    $cfg->{dbh}  = zkernel->zapp_dbh();
    $cfg->{zark} = Zark->new(dbh => $cfg->{dbh}, proc => $proc, setup => 1);
    $cfg->{dt}   = ZAPP::DT->new($cfg);
    $cfg->{bip}  = ZAPP::BIP::Config->new($cfg);
    $cfg->{svc}  = $svc;
    $cfg->{_stomp} = zkernel->zapp_stomp();
    my $service  = ZAPP::Service->new($cfg);
    return $service;
}

#
# usage help
#
sub usage {
    confess  <<EOF;
usage: 
    tsvc -n|--name zjdz|yspz_0001
         -d|--datafile /file/of/data
        [-c|--conf /file/of/you/xxxx.conf ]
EOF
}


__END__

