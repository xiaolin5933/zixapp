#!/usr/bin/perl
use strict;
use warnings;
use Zeta::Serializer::JSON;
use Net::Stomp;
use Carp;
use IO::Socket::INET;
use Zeta::Run;
use DBI;
use Carp;
use constant DEBUG =>  $ENV{ZAPP_DEBUG} || 0;

require Data::Dump if DEBUG;

my $cfg = {
    # main.pl 配置
    main => {
        port   => 9898,
    },

    # 数据库配置 
    db => {
        dsn    => "dbi:DB2:$ENV{DB_NAME}",
        user   => "$ENV{DB_USER}",
        pass   => "$ENV{DB_PASS}",
        schema => "$ENV{DB_SCHEMA}",
    },

    # 批提交大小
    commit_size => 50,

    # 消息队列配置
    stomp => {
        hostname => '127.0.0.1',
        port     => '51612',
        queue    => {
           proc  => 'zixapp.proc',
        }
    },

    # 序列化工具
    serializer => Zeta::Serializer::JSON->new(),

    # service 配置
    service => {
        hostname  => '127.0.0.1',
        port      => '7676', 
        lfd       => IO::Socket::INET->new(
            Listen    => 5, 
            LocalAddr => '0.0.0.0',
            LocalPort => '7676',
            Proto     => 'tcp',
            ReuseAddr => 1,
        ),
    },
};

helper zapp_config => sub { $cfg };
helper zapp_dbh    => sub {
    my $cfg = zkernel->zapp_config();
    my $dbh = DBI->connect(
        @{$cfg->{db}}{qw/dsn user pass/},
        {
            RaiseError       => 1,
            PrintError       => 0,
            AutoCommit       => 0,
            FetchHashKeyName => 'NAME_lc',
            ChopBlanks       => 1,
            InactiveDestroy  => 1,
        }
    );
    unless($dbh) {
        zlogger->error("can not connet db[@{$cfg->{db}}{qw/dsn user pass/}], quit");
        exit 0;
    }

    # 设置默认schema
    $dbh->do("set current schema $cfg->{db}->{schema}")
        or confess "can not set current schema $cfg->{db}->{schema}";
    return $dbh;
};

# 连接数据库
helper zapp_setup  => sub { 
    my $cfg = zkernel->zapp_config;
    # $cfg->{dbh}->disconnect();
    $cfg->{dbh} = zkernel->zapp_dbh(); 
};

# 连接stomp
helper zapp_stomp => sub {

    my $cfg = shift->zapp_config();
    # 连接stomp
    my $stp = Net::Stomp->new({
        hostname => $cfg->{stomp}->{hostname},
        port     => $cfg->{stomp}->{port} ,
    }) or confess <<EOF;
Net::Stomp failed with 
    { 
        hostname => $cfg->{stomp}->{hostname}, 
        port => $cfg->{stomp}->{port} 
}
EOF
    $stp->connect({ login => 'hello', passcode => 'there' });
    return $stp;
};


$cfg;

__END__

dev vs configuration

